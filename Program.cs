using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography.X509Certificates;
using System.Threading.Tasks;
using BotMedicUa.Context;
using BotMedicUa.Models;
using BotMedicUa.Models.Enum;
using BotMedicUa.Repository;
using BotMedicUa.Services;
using Deployf.Botf;
using Microsoft.AspNetCore.Identity;
using Newtonsoft.Json;

namespace BotMedicUa
{

    public class Program : BotfProgram
    {
        public static void Main(string[] args) => StartBot(args);

        private readonly IHospitalService _hospitalService = new HospitalService();

        [Action(template: "/start", desc: "–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º")]
        private async Task Start()
        {
            var date = new DateTime();
            var user = _hospitalService.GetUser(ChatId);
            if (user != null)
            {
                PushL("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:");
                RowButton("‚Ä¢ –Ø –∑–Ω–∞—é, —è–∫–∏–π –ª—ñ–∫–∞—Ä –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω", Q(ChooseDoctor));
                RowButton("‚Ä¢ –ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –≤–∏–±–æ—Ä–æ–º —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª—ñ–∫–∞—Ä—è", Q(RecordToFamalyDoctor));
                RowButton("–ú–æ—ó –∑–∞–ø–∏—Å–∏", Q(MyRecords));
                RowButton("–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å");
            }
            else
            {
                PushL("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é: ");
                _hospitalService.RegisterPatient(new Patient() { UserId = ChatId });
                await Registration();
            }
        }

        private async Task Registration()
        {
            Send("–Ø–∫ –¥–æ –≤–∞—Å –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å?");
            var name = await AwaitText();

            _hospitalService.RegisterPatient(new Patient()
            {
                UserId = ChatId,
                FirstName = name
            });
            Start();
        }
        [Action]
        public Task RecordToFamalyDoctor()
        {
            PushL("–ó–∞–ø–∏—à—ñ—Ç—å—Å—è –¥–æ —Å—ñ–º–µ–π–Ω–æ–≥–æ –ª—ñ–∫–∞—Ä—è:");
            RowButton("–ó–∞–ø–∏—Å–∞—Ç–∏—Å—å", Q(WriteDoctorsCard, DoctorClassification.FamalyDoctor));
            RowButton("üî¥ –ù–∞–∑–∞–¥ üî¥ ", Q(Start));
            return Task.CompletedTask;
        }
        [Action]
        public Task ChooseDoctor()
        {
            var names = Enum.GetValues(typeof(DoctorClassification)).Cast<DoctorClassification>();
            PushL("–í–∏–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ–≥–æ –ª—ñ–∫–∞—Ä—è:");
            foreach (var name in names)
            {
                RowButton(GetNameOfSpecialization(name), Q(WriteDoctorsCard, name));
            }
            RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
            return Task.CompletedTask;
        }
        
        [Action]
        private Task WriteDoctorsCard(DoctorClassification classification)
        {
            var doctors = _hospitalService.GetDoctors(classification);
            if (doctors == null || doctors.Count == 0)
            {
                PushL("–ù–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –ª—ñ–∫–∞—Ä—ñ–≤.");
            }
            else
            {
                PushL("–í–∏–±–µ—Ä—ñ—Ç—å –ª—ñ–∫–∞—Ä—è:");
                foreach (var doctor in doctors)
                {
                    RowButton($"{doctor.FirstName} {doctor.LastName}", Q(SetMonth, doctor.Id.ToString(), classification));
                }
            }
            
            RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
            return Task.CompletedTask;
        }

        [Action]
        public Task SetMonth(string id, DoctorClassification classification)
        {
            var records = _hospitalService.GetUserRecords(ChatId);
            var recordsClassification = records.Select(x => x.Doctor.Classification);

            if (recordsClassification.Contains(classification))
            {
                PushL("–í–∏ –≤–∂–µ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!");
                RowButton("–ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞–ø–∏—Å", Q(WriteRecord, classification));
            }
            else
            {
                var doctor = _hospitalService.GetDoctor(Guid.Parse(id));

                var avaliableDates = doctor.GetAvaliableDates();
                var avaliableMonth = avaliableDates.Select(x => x.Month)
                    .Distinct()
                    .ToList();
                int firstMonth = avaliableMonth[0];
                int secondMonth = avaliableMonth[1];

                PushL("–í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—è—Ü—å:");
                RowButton($"{GetMonthName(avaliableMonth[0])}",
                    Q(SetDay, GetJson(new DateDTO{Day = 1, Id = id, Month = 1}),firstMonth));
                RowButton($"{GetMonthName(avaliableMonth[1])}",
                    Q(SetDay, id,secondMonth));
            }

            RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
            return Task.CompletedTask;
        }

        [Action]
        private Task SetDay(string id, int month)
        {
            var dto = JsonConvert.DeserializeObject<DateDTO>(id);
            var doctor = _hospitalService.GetDoctor(Guid.Parse(dto.Id));

            var dates = doctor.GetAvaliableDates().Where(x=>x.Month==month).Select(x=>x.Day).Distinct().ToList();
            
            PushL("–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å:");

            foreach (var date in dates)
            {
                RowButton($"{date}", Q(SetHour,dto));
            }
            
            return Task.CompletedTask;
        }

        [Action]
        public Task SetHour(string json)
        {
            Send($"{json}");
            return Task.CompletedTask;
        }
        [Action]
        public Task WriteOnConsultation(string id, string json)
        {
            var dateTime = JsonConvert.DeserializeObject<DateTime>(json);
            var doctor = _hospitalService.GetDoctor(Guid.Parse(id));
            _hospitalService.AddRecord(ChatId, new Record { Date = dateTime, Doctor = doctor });
            PushL("–í–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å");
            RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
            return Task.CompletedTask;
        }
        [Action]
        public Task MyRecords()
        {
            var records = _hospitalService.GetUserRecords(ChatId);
            if (records.Count == 0 || records == null)
            {
                PushL("–£ –≤–∞—Å –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤.");
                RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
            }

            var recordsClassification = records.Select(x => x.Doctor.Classification).Distinct();
            
            PushL("–í–∞—à—ñ –∑–∞–ø–∏—Å–∏:");
            foreach (var classification in recordsClassification)
            {
                RowButton($"{GetNameOfSpecialization(classification)}", Q(WriteRecord, classification));
            }
            
            RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
            return Task.CompletedTask;
        }
        [Action]
        private void WriteRecord(DoctorClassification classification)
        {
            var records = _hospitalService.GetUserRecords(ChatId);
            foreach (var record in records)
            {
                if (record.Doctor.Classification == classification)
                {
                    PushLL($"–ó–∞–ø–∏—Å –¥–æ {GetNameOfSpecialization(record.Doctor.Classification)} {record.Date.Day} {GetMonthName(record.Date.Month)} {record.Date.Hour} {record.Date.Minute}");
                    RowButton("–í—ñ–¥–º—ñ–Ω–∏—Ç–∏", Q(DeleteRecord, record.Id.ToString()));
                    RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
                }
            }
        }

        [Action]
        private Task DeleteRecord(string id)
        {
            _hospitalService.RemoveRecord(Guid.Parse(id));
            PushL(" –£—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!");
            RowButton("–ù–∞ –≥–æ–ª–æ–≤–Ω—É", Q(Start));
            return Task.CompletedTask;
        }

        public string GetNameOfSpecialization(DoctorClassification classification)
        {
            switch (classification)
            {
                case DoctorClassification.FamalyDoctor:
                    return "–°—ñ–º–µ–π–Ω–∏–π –ª—ñ–∫–∞—Ä";
                case DoctorClassification.Pediator:
                    return "–ü–µ–¥—ñ–∞—Ç–æ—Ä";
                case DoctorClassification.IntensiveTerapy:
                    return "–Ü–Ω—Ç–µ–Ω—Å–∏–≤–Ω–∞ —Ç–µ—Ä–∞–ø—ñ—è";
                case DoctorClassification.Anestasiolog:
                    return "–ê–Ω–∞—Å—Ç–µ–∑—ñ–æ–ª–æ–≥";
                case DoctorClassification.Gastroenterolog:
                    return "–ì–∞—Å—Ç—Ä–æ–µ–Ω—Ç–µ—Ä–æ–ª–æ–≥";
                case DoctorClassification.ChildrenGastroenterolog:
                    return "–î–∏—Ç—è—á–∏–π –≥–∞—Ç—Å—Ä–æ–µ–Ω—Ç–µ—Ä–æ–ª–æ–≥";
                case DoctorClassification.Gematolog:
                    return "–ì–µ–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.Genetic:
                    return "–ì–µ–Ω–µ—Ç–∏–∫";
                case DoctorClassification.Ginecoloc:
                    return "–ì—ñ–Ω–µ–∫–æ–ª–æ–≥";
                case DoctorClassification.ChildrenGinecolog:
                    return "–î–∏—Ç—è—á–∏–π –≥—ñ–Ω–µ–∫–æ–ª–æ–≥";
                case DoctorClassification.Dermatolog:
                    return "–î–µ—Ä–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.ChildrenDermatolog:
                    return "–î–∏—Ç—è—á–∏–π –¥–µ—Ä–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.Endocrinolog:
                    return "–ï–Ω–¥–æ–∫—Ä–∏–Ω–æ–ª–æ–≥";
                case DoctorClassification.Endoscopist:
                    return "–ï–Ω–¥–æ—Å–∫–æ–ø—ñ—Å—Ç";
                case DoctorClassification.Infectionist:
                    return "—ñ–Ω—Ñ–µ–∫—Ü–æ–Ω—ñ—Å—Ç";
                case DoctorClassification.ChildrenInfectionist:
                    return "–î–∏—Ç—è—á–∏–π —ñ–Ω—Ñ–µ–∫—ñ–æ–Ω—ñ—Å—Ç";
                case DoctorClassification.CardiologAritmolog:
                    return "–ö–∞—Ä–¥—ñ–æ–ª–æ–≥-–∞—Ä–∏—Ç–º–æ–ª–æ–≥";
                case DoctorClassification.ChildrenCardiolog:
                    return "–î–∏—Ç—è–∏–π –∫–∞—Ä–¥—ñ–æ–ª–æ–≥, –∫–∞—Ä–¥—ñ–æ—Ä–µ–≤–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.Combustiolog:
                    return "–ö–æ–º–±—É—Å—Ç–æ–ª–æ–≥";
                case DoctorClassification.Nevrolog:
                    return "–ù–µ–≤—Ä–æ–ª–æ–≥/–Ω–µ–≤—Ä–æ–ø–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.Nefrolog:
                    return "–ù–µ—Ñ—Ä–æ–ª–æ–≥";
                case DoctorClassification.ChildrenNefrolog:
                    return "–î–∏—Ç—è—á–∏–π –Ω–µ—Ñ—Ä–æ–ª–æ–≥";
                case DoctorClassification.OnkologOnkohirurg:
                    return "–û–Ω–∫–æ–ª–æ–≥/–æ–Ω–∫–æ—Ö—ñ—Ä—É—Ä–≥";
                case DoctorClassification.LOR:
                    return "–õ–û–†";
                case DoctorClassification.ChildrenLOR:
                    return "–î–∏—Ç—è—á–∏–π –õ–û–†";
                case DoctorClassification.Okulist:
                    return "–û–∫—É–ª—ñ—Å—Ç";
                case DoctorClassification.ChildrenOkulist:
                    return "–î–∏—Ç—è—á–∏–π –æ–∫—É–ª—ñ—Å—Ç";
                case DoctorClassification.Psyhiatr:
                    return "–ü—Å–∏—Ö—ñ–∞—Ç—Ä";
                case DoctorClassification.Psyholog:
                    return "–ü—Å–∏—Ö–æ–ª–æ–≥";
                case DoctorClassification.Psuhoterapevt:
                    return "–ü—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç";
                case DoctorClassification.Pulmonolog:
                    return "–ü—É–ª—å–º–æ–Ω–æ–ª–æ–≥";
                case DoctorClassification.ChildrenPulmonolog:
                    return "–î–∏—Ç—è—á–∏–π –ø—É–ª—å–º–æ–Ω–æ–ª–æ–≥";
                case DoctorClassification.Reabilitolog:
                    return "–†–µ–∞–±—ñ–ª—ñ—Ç–æ–ª–æ–≥";
                case DoctorClassification.Revmatolog:
                    return "–†–µ–≤–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.Rengenotolog:
                    return "–†–µ–Ω—Ç–≥–µ–Ω–æ–ª–æ–≥";
                case DoctorClassification.Stomatolog:
                    return "–°—Ç–æ–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.ChildrenOrtoped:
                    return "–î–∏—Ç—è—á–∏–π –æ—Ä—Ç–æ–ø–µ–¥";
                case DoctorClassification.ChildrenTravmatolog:
                    return "–î–∏—Ç—è—á–∏–π —Ç—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.UZD:
                    return "–£–ó–î/–£–ª—å—Ç—Ä–æ–∑–≤—É–∫–æ–≤–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞";
                case DoctorClassification.Yrolog:
                    return "–£—Ä–æ–ª–æ–≥";
                case DoctorClassification.ChildrenYrolog:
                    return "–î–∏—Ç—è—á–∏–π —É—Ä–æ–ª–æ–≥";
                case DoctorClassification.Ftiziatr:
                    return "–§—Ç–∏–∑—ñ–∞—Ç—Ä";
                case DoctorClassification.ChildrenFtiziatr:
                    return "–î–∏—Ç—è—á–∏–π —Ñ—Ç–∏–∑—ñ–∞—Ç—Ä";
                case DoctorClassification.ChildrenStomatolog:
                    return "–î–∏—Ç—è—á–∏–π —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.Travmatolog:
                    return "–¢—Ä–∞–≤–º–∞—Ç–æ–ª–æ–≥";
                case DoctorClassification.Ortoped:
                    return "–û—Ä—Ç–æ–ø–µ–¥";
                default:
                    throw new ArgumentOutOfRangeException(nameof(classification), classification, null);
            }
        }

        private string GetMonthName(int numberMonth)
        {
            switch (numberMonth)
            {
                case 1:
                    return "–°—ñ—á–µ–Ω—å";
                case 2:
                    return "–õ—é—Ç–∏–π";
                case 3:
                    return "–ë–µ—Ä–µ–∑–µ–Ω—å";
                case 4:
                    return "–ö–≤—ñ—Ç–µ–Ω—å";
                case 5:
                    return "–¢—Ä–∞–≤–µ–Ω—å";
                case 6:
                    return "–ß–µ—Ä–≤–µ–Ω—å";
                case 7:
                    return "–õ–∏–ø–µ–Ω—å";
                case 8:
                    return "–°–µ—Ä–ø–µ–Ω—å";
                case 9:
                    return "–í–µ—Ä–µ—Å–µ–Ω—å";
                case 10:
                    return "–ñ–æ–≤—Ç–µ–Ω—å";
                case 11:
                    return "–õ–∏—Å—Ç–æ–ø–∞–¥";
                case 12:
                    return "–ì—Ä—É–¥–µ–Ω—å";
                default:
                    throw new ArgumentOutOfRangeException();
            }
        }

        public string GetJson(DateDTO dto)
        {
            var json = JsonConvert.SerializeObject(dto);
            return json;
        }
    }
}
