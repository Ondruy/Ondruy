using System;
using System.Threading.Tasks;
using BotMedicUa.Context;
using BotMedicUa.Models;
using BotMedicUa.Repository;
using BotMedicUa.Services;
using Deployf.Botf;
using Microsoft.AspNetCore.Identity;

namespace BotMedicUa
{

    public class Program : BotfProgram
    {
        public static void Main(string[] args) => StartBot(args);

        private readonly IHospitalService _hospitalService = new HospitalService();

        [Action(template: "/start", desc: "–ü–æ—á–∞—Ç–æ–∫ —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º")]
        private async Task Start()
        {
            var user = _hospitalService.GetUser(ChatId);
            if (user != null)
            {
                PushL("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:");
                RowButton("‚Ä¢ –Ø –∑–Ω–∞—é, —è–∫–∏–π –ª—ñ–∫–∞—Ä –º–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–µ–Ω", Q(Start));
                RowButton("‚Ä¢ –ú–µ–Ω—ñ –ø–æ—Ç—Ä—ñ–±–Ω–∞ –¥–æ–ø–æ–º–æ–≥–∞ –∑ –≤–∏–±–æ—Ä–æ–º —Å–ø–µ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –ª—ñ–∫–∞—Ä—è", Q(PressButton));
            }
            else
            {
                Send("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –î–∞–≤–∞–π—Ç–µ –ø—Ä–æ–π–¥–µ–º–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é: ");
                _hospitalService.RegisterPatient(new Patient(){UserId = ChatId});
                await Registration();
            }
        }
        private async Task Registration()
        {
            Send("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º'—è");
            var name = await AwaitText();

            Send("–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î –ø—Ä—ñ–∑–≤–∏—â–µ:");
            var lastName = await AwaitText();

            Send("–í–≤–µ–¥—ñ—Ç—å —Å–≤—ñ–π –Ω–æ–º–µ—Ä:");
            var phoneNumber = await AwaitText();

            _hospitalService.RegisterPatient(new Patient()
            {
                UserId = ChatId,
                FirstName = name,
                LastName = lastName,
                PhoneNumber = phoneNumber
            });
            Start();
        }

        [Action]
        public Task PressButton()
        {
            PushL("–í —è–∫—ñ–π —á–∞—Å—Ç–∏–Ω—ñ —Ç—ñ–ª–∞ –ª–æ–∫–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ –Ω–µ–ø—Ä–∏—î–º–Ω—ñ –≤—ñ–¥—á—É—Ç—Ç—è/—Å–∏–º–ø—Ç–æ–º–∏?");
            RowButton("–ì–æ–ª–æ–≤–∞", Q(Head));
            RowButton("–¢—É–ª—É–±");
            RowButton("–†—É–∫–∏");
            RowButton("–ù–æ–≥–∏");
            RowButton("üî¥ –ù–∞–∑–∞–¥ üî¥ ",Q(Start));
            return Task.CompletedTask;
        }

        [Action]

        public Task Head()
        {
            PushL("–©–æ —Å–∞–º–µ —Ç—É—Ä–±—É—î?");
            RowButton("–ë—ñ–ª—å, –≥–æ–ª–æ–≤–æ–∫—Ä—É–∂—ñ–Ω–Ω—è",Q(One));
            RowButton("–£–¥–∞—Ä –≥–æ–ª–æ–≤–æ—é",Q(Two));
            RowButton("–¢—Ä–∞–≤–º–∞ –≤ —Ä–∞–π–æ–Ω—ñ –æ–±–ª–∏—á—á—è, –∞ —Å–∞–º–µ - —â–æ–∫–∏, –±—Ä–æ–≤–∏, –≥—É–±–∏",Q(Three));
            RowButton("–£–¥–∞—Ä –≤ –Ω—ñ—Å",Q(Forth));
            RowButton("üî¥ –ù–∞–∑–∞–¥ üî¥ ", Q(Start));
            return Task.CompletedTask;
        }
        [Action]
        public Task One()
        {
            PushL("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:");
            return Task.CompletedTask;
        }
        [Action]
        public Task Two()
        {
            PushL("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:");
            return Task.CompletedTask;
        }
        [Action]
        public Task Three()
        {
            PushL("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:");
            return Task.CompletedTask;
        }
        [Action]
        public Task Forth()
        {
            PushL("–î–æ–±—Ä–∏–π –¥–µ–Ω—å! –í–∞—Å –≤i—Ç–∞—î 'üíô TURBO TELEMED üíõ'. –û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç:");
            return Task.CompletedTask;
        }
    }
}
